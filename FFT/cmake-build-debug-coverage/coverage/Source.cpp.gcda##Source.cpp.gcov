        -:    0:Source:C:/Users/xkzmx/Documents/Odyssey/School/Thread/FFT/Source.cpp
        -:    0:Graph:C:\Users\xkzmx\Documents\Odyssey\School\Thread\FFT\cmake-build-debug-coverage\CMakeFiles\FFT.dir\Source.cpp.gcno
        -:    0:Data:C:\Users\xkzmx\Documents\Odyssey\School\Thread\FFT\cmake-build-debug-coverage\CMakeFiles\FFT.dir\Source.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <vector>
        -:    3:#include <fstream>
        -:    4:#include <string>
        -:    5:#include <complex>
        -:    6:#include <thread>
        -:    7:#include <cmath>
        -:    8:using namespace std;
        -:    9:
        -:   10:int bitReverse(int x, int bits);
        -:   11:void localFFT(int totalInput, int stage, int innerStart, int innerEnd, vector<complex<double>>& tempResult, const vector<complex<double>>& butterflyInput);
function main called 1 returned 100% blocks executed 73%
        1:   12:int main() {
        -:   13:
        1:   14:    vector<double> inputData = {1,1,1,0,0,0,0,0};
        1:   14-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   14-block  1
    $$$$$:   14-block  2
        1:   15:    int totalInput = inputData.size();
call    0 returned 1
        1:   16:    int bits = (int)log2(totalInput);
call    0 returned 1
        -:   17:
        1:   18:    vector<complex<double>> butterflyInput;
call    0 returned 1
        9:   19:    for (int i = 0; i < totalInput; ++i) {
        9:   19-block  0
branch  0 taken 8
branch  1 taken 1 (fallthrough)
        8:   20:        butterflyInput.emplace_back(inputData[bitReverse(i,bits)],0);
        8:   20-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
branch  3 taken 8 (fallthrough)
branch  4 taken 0 (throw)
        8:   20-block  1
    $$$$$:   20-block  2
        -:   21:    }
        -:   22:
        4:   23:    for (int i = 1; i <= bits; ++i) {
        1:   23-block  0
        4:   23-block  1
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:   24:        auto tempResult = butterflyInput;
        3:   24-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   25:        cout << "Stage:" <<i << endl;
        3:   25-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   25-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:   25-block  2
call    6 returned 3
branch  7 taken 3 (fallthrough)
branch  8 taken 0 (throw)
        3:   26:        localFFT(totalInput,i,0,totalInput,tempResult, butterflyInput);
        3:   26-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   27:        cout << endl;
        3:   27-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   28:        butterflyInput = tempResult;
        3:   28-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   29:    }
        3:   29-block  0
call    0 returned 3
    $$$$$:   29-block  1
call    1 never executed
        9:   30:    for (const auto &input: butterflyInput) {
        1:   30-block  0
call    0 returned 1
call    1 returned 1
        8:   30-block  1
call    2 returned 8
        8:   30-block  2
call    3 returned 8
        9:   30-block  3
call    4 returned 9
branch  5 taken 8
branch  6 taken 1 (fallthrough)
        8:   31:        cout << input << endl;
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:   31-block  0
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        -:   32:    }
        1:   33:    cout << endl;
        1:   33-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   34:    return 0;
        1:   35:}
        1:   35-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   35-block  1
call    2 never executed
    $$$$$:   35-block  2
call    3 never executed
function _Z10bitReverseii called 8 returned 100% blocks executed 100%
        8:   36:int bitReverse(int x, int bits) {
        -:   37:    // should have use lookup table
        -:   38:    // x is the number to be reversed, bits is the number of bits. bits should be 6 since
        -:   39:    // 64 = 2^6;
        8:   40:    int ans = 0;
       32:   41:    for (int i = 0; i < bits; ++i) {
        8:   41-block  0
       32:   41-block  1
branch  0 taken 24
branch  1 taken 8 (fallthrough)
        -:   42:        // get last bit of x
       24:   43:        ans = ans << 1; // shift ans left to leave out last bit to be assigned
       24:   44:        ans = ans | (x & 1); // assign last bit to ans
       24:   45:        x = x >> 1; // lose the last bit
       24:   45-block  0
        -:   46:    }
        8:   47:    return ans;
        8:   47-block  0
        -:   48:}
        -:   49:
function _Z8localFFTiiiiRSt6vectorISt7complexIdESaIS1_EERKS3_ called 3 returned 100% blocks executed 93%
        3:   50:void localFFT(int totalInput,int stage, int innerStart, int innerEnd, vector<complex<double>> &tempResult, const vector<complex<double>>& butterflyInput) {
        3:   51:    double pi = 3.1415926536;
        3:   52:    const complex<double> J(0,1);
        3:   53:    complex<double> W= exp(-J*(pi/(totalInput>>1)) );
        3:   53-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
        -:   54:
       27:   55:    for (int j = innerStart; j < innerEnd; ++j) {
       24:   55-block  0
       27:   55-block  1
branch  0 taken 24
branch  1 taken 3 (fallthrough)
       24:   56:        if((j/((int)pow(2,stage-1)) )%2 == 0){
       24:   56-block  0
call    0 returned 24
branch  1 taken 12 (fallthrough)
branch  2 taken 12
       12:   57:            tempResult[j] = butterflyInput[j]+butterflyInput[j+(int)pow(2,stage-1)];
       12:   57-block  0
call    0 returned 12
call    1 returned 12
call    2 returned 12
call    3 returned 12
call    4 returned 12
branch  5 taken 12 (fallthrough)
branch  6 taken 0 (throw)
        -:   58:        }else{
       12:   59:            tempResult[j] = -1.0 * butterflyInput[j]+butterflyInput[j-(int)pow(2,stage-1)];
       12:   59-block  0
call    0 returned 12
call    1 returned 12
call    2 returned 12
call    3 returned 12
call    4 returned 12
call    5 returned 12
branch  6 taken 12 (fallthrough)
branch  7 taken 0 (throw)
       12:   59-block  1
    $$$$$:   59-block  2
    $$$$$:   59-block  3
        -:   60:        }
       24:   61:        if((j/(1<<stage))%2!=0){
       24:   61-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 16
        8:   62:            int powerOfW = j%(1<<stage)*totalInput/((int)pow(2,stage+1));
        8:   62-block  0
call    0 returned 8
        -:   63:            //cout << powerOfW << endl;
        -:   64:            //tempResult[j]*=time * totalInput/((int)pow(2,i+1));
        8:   65:            tempResult[j]*=pow(W, powerOfW);
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:   65-block  0
call    3 returned 8
call    4 returned 8
        -:   66:            //tempResult[j] *=  pow(W,time);
        -:   67:        }
        -:   68:    }
        3:   69:}
        3:   69-block  0
